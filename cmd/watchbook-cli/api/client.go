// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api


func (c *Client) Signup(body SignupBody, options Options) (*Signup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signup](data, body)
}

func (c *Client) Signin(body SigninBody, options Options) (*Signin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signin](data, body)
}

func (c *Client) ChangePassword(body ChangePasswordBody, options Options) (*any, error) {
	path := "/api/v1/auth/password"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetMe(options Options) (*GetMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMe](data, nil)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetSystemInfo](data, nil)
}

func (c *Client) StartDownload(body StartDownloadBody, options Options) (*any, error) {
	path := "/api/v1/system/download"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) CancelDownload(options Options) (*any, error) {
	path := "/api/v1/system/download"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}


func (c *Client) UpdateUserSettings(body UpdateUserSettingsBody, options Options) (*any, error) {
	path := "/api/v1/user/settings"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) CreateApiToken(body CreateApiTokenBody, options Options) (*CreateApiToken, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateApiToken](data, body)
}

func (c *Client) GetAllApiTokens(options Options) (*GetAllApiTokens, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAllApiTokens](data, nil)
}

func (c *Client) DeleteApiToken(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetAnimes(options Options) (*GetAnimes, error) {
	path := "/api/v1/animes"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAnimes](data, nil)
}

func (c *Client) GetAnimeById(id string, options Options) (*GetAnimeById, error) {
	path := Sprintf("/api/v1/animes/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAnimeById](data, nil)
}

func (c *Client) CreateAnime(body CreateAnimeBody, options Options) (*CreateAnime, error) {
	path := "/api/v1/animes"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateAnime](data, body)
}

func (c *Client) SetAnimeUserData(id string, body SetAnimeUserData, options Options) (*any, error) {
	path := Sprintf("/api/v1/animes/%v/user", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetUserAnimeList(id string, options Options) (*GetAnimes, error) {
	path := Sprintf("/api/v1/animes/user/list/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAnimes](data, nil)
}


func (c *ClientUrls) Signup() (*URL, error) {
	path := "/api/v1/auth/signup"
	return c.getUrl(path)
}

func (c *ClientUrls) Signin() (*URL, error) {
	path := "/api/v1/auth/signin"
	return c.getUrl(path)
}

func (c *ClientUrls) ChangePassword() (*URL, error) {
	path := "/api/v1/auth/password"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMe() (*URL, error) {
	path := "/api/v1/auth/me"
	return c.getUrl(path)
}

func (c *ClientUrls) GetSystemInfo() (*URL, error) {
	path := "/api/v1/system/info"
	return c.getUrl(path)
}

func (c *ClientUrls) StartDownload() (*URL, error) {
	path := "/api/v1/system/download"
	return c.getUrl(path)
}

func (c *ClientUrls) CancelDownload() (*URL, error) {
	path := "/api/v1/system/download"
	return c.getUrl(path)
}

func (c *ClientUrls) SseHandler() (*URL, error) {
	path := "/api/v1/system/sse"
	return c.getUrl(path)
}

func (c *ClientUrls) UpdateUserSettings() (*URL, error) {
	path := "/api/v1/user/settings"
	return c.getUrl(path)
}

func (c *ClientUrls) CreateApiToken() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) GetAllApiTokens() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteApiToken(id string) (*URL, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAnimes() (*URL, error) {
	path := "/api/v1/animes"
	return c.getUrl(path)
}

func (c *ClientUrls) GetAnimeById(id string) (*URL, error) {
	path := Sprintf("/api/v1/animes/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) CreateAnime() (*URL, error) {
	path := "/api/v1/animes"
	return c.getUrl(path)
}

func (c *ClientUrls) SetAnimeUserData(id string) (*URL, error) {
	path := Sprintf("/api/v1/animes/%v/user", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetUserAnimeList(id string) (*URL, error) {
	path := Sprintf("/api/v1/animes/user/list/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAnimeImage(id string, image string) (*URL, error) {
	path := Sprintf("/files/animes/%v/%v", id, image)
	return c.getUrl(path)
}
