// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api


func (c *Client) Signup(body SignupBody, options Options) (*Signup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signup](data, body)
}

func (c *Client) Signin(body SigninBody, options Options) (*Signin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signin](data, body)
}

func (c *Client) ChangePassword(body ChangePasswordBody, options Options) (*any, error) {
	path := "/api/v1/auth/password"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetMe(options Options) (*GetMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMe](data, nil)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetSystemInfo](data, nil)
}

func (c *Client) GetUser(id string, options Options) (*GetUser, error) {
	path := Sprintf("/api/v1/users/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetUser](data, nil)
}

func (c *Client) UpdateUserSettings(body UpdateUserSettingsBody, options Options) (*any, error) {
	path := "/api/v1/user/settings"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) CreateApiToken(body CreateApiTokenBody, options Options) (*CreateApiToken, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateApiToken](data, body)
}

func (c *Client) GetAllApiTokens(options Options) (*GetAllApiTokens, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAllApiTokens](data, nil)
}

func (c *Client) DeleteApiToken(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) ImportMalAnimeList(username string, options Options) (*any, error) {
	path := Sprintf("/api/v1/users/import/mal/%v/anime", username)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetMedia(options Options) (*GetMedia, error) {
	path := "/api/v1/media"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, nil)
}

func (c *Client) GetMediaById(id string, options Options) (*GetMediaById, error) {
	path := Sprintf("/api/v1/media/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMediaById](data, nil)
}

func (c *Client) GetMediaParts(id string, options Options) (*GetMediaParts, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMediaParts](data, nil)
}

func (c *Client) CreateMedia(body CreateMediaBody, options Options) (*CreateMedia, error) {
	path := "/api/v1/media"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateMedia](data, body)
}

func (c *Client) EditMedia(id string, body EditMediaBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ChangeMediaImages(id string, boundary string, body Reader, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/images", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return RequestForm[any](data, boundary, body)
}

func (c *Client) AddPart(id string, body AddPartBody, options Options) (*AddPart, error) {
	path := Sprintf("/api/v1/media/%v/single/parts", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[AddPart](data, body)
}

func (c *Client) EditPart(id string, index string, body EditPartBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/parts/%v", id, index)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) RemovePart(id string, index string, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/parts/%v", id, index)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) SetParts(id string, body SetPartsBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) SetMediaUserData(id string, body SetMediaUserData, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) DeleteMediaUserData(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) SetMediaRelease(id string, body SetMediaReleaseBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/release", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) DeleteMediaRelease(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/release", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetCollections(options Options) (*GetCollections, error) {
	path := "/api/v1/collections"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollections](data, nil)
}

func (c *Client) GetCollectionById(id string, options Options) (*GetCollectionById, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollectionById](data, nil)
}

func (c *Client) GetCollectionItems(id string, options Options) (*GetCollectionItems, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollectionItems](data, nil)
}

func (c *Client) CreateCollection(body CreateCollectionBody, options Options) (*CreateCollection, error) {
	path := "/api/v1/collections"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateCollection](data, body)
}

func (c *Client) EditCollection(id string, body EditCollectionBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) DeleteCollection(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) ChangeCollectionImages(id string, boundary string, body Reader, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v/images", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return RequestForm[any](data, boundary, body)
}

func (c *Client) AddCollectionItem(id string, body AddCollectionItemBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) RemoveCollectionItem(id string, mediaId string, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v/items/%v", id, mediaId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) EditCollectionItem(id string, mediaId string, body EditCollectionItemBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v/items/%v", id, mediaId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetProviders(options Options) (*GetProviders, error) {
	path := "/api/v1/providers"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetProviders](data, nil)
}

func (c *Client) ProviderSearchMedia(providerName string, options Options) (*GetProviderSearch, error) {
	path := Sprintf("/api/v1/providers/%v/media", providerName)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetProviderSearch](data, nil)
}

func (c *Client) ProviderSearchCollections(providerName string, options Options) (*GetProviderSearch, error) {
	path := Sprintf("/api/v1/providers/%v/collections", providerName)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetProviderSearch](data, nil)
}

func (c *Client) ProviderImportMedia(providerName string, body PostProviderImportMediaBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/providers/%v/media/import", providerName)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ProviderImportCollections(providerName string, body PostProviderImportCollectionsBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/providers/%v/collections/import", providerName)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ProviderUpdateMedia(providerName string, mediaId string, body ProviderMediaUpdateBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/providers/%v/media/%v", providerName, mediaId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ProviderUpdateCollection(providerName string, collectionId string, body ProviderCollectionUpdateBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/providers/%v/collections/%v", providerName, collectionId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}



func (c *ClientUrls) Signup() (*URL, error) {
	path := "/api/v1/auth/signup"
	return c.getUrl(path)
}

func (c *ClientUrls) Signin() (*URL, error) {
	path := "/api/v1/auth/signin"
	return c.getUrl(path)
}

func (c *ClientUrls) ChangePassword() (*URL, error) {
	path := "/api/v1/auth/password"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMe() (*URL, error) {
	path := "/api/v1/auth/me"
	return c.getUrl(path)
}

func (c *ClientUrls) GetSystemInfo() (*URL, error) {
	path := "/api/v1/system/info"
	return c.getUrl(path)
}

func (c *ClientUrls) GetUser(id string) (*URL, error) {
	path := Sprintf("/api/v1/users/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) UpdateUserSettings() (*URL, error) {
	path := "/api/v1/user/settings"
	return c.getUrl(path)
}

func (c *ClientUrls) CreateApiToken() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) GetAllApiTokens() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteApiToken(id string) (*URL, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) ImportMalAnimeList(username string) (*URL, error) {
	path := Sprintf("/api/v1/users/import/mal/%v/anime", username)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMedia() (*URL, error) {
	path := "/api/v1/media"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaById(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaParts(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	return c.getUrl(path)
}

func (c *ClientUrls) CreateMedia() (*URL, error) {
	path := "/api/v1/media"
	return c.getUrl(path)
}

func (c *ClientUrls) EditMedia(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) ChangeMediaImages(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/images", id)
	return c.getUrl(path)
}

func (c *ClientUrls) AddPart(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/single/parts", id)
	return c.getUrl(path)
}

func (c *ClientUrls) EditPart(id string, index string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/parts/%v", id, index)
	return c.getUrl(path)
}

func (c *ClientUrls) RemovePart(id string, index string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/parts/%v", id, index)
	return c.getUrl(path)
}

func (c *ClientUrls) SetParts(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	return c.getUrl(path)
}

func (c *ClientUrls) SetMediaUserData(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteMediaUserData(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	return c.getUrl(path)
}

func (c *ClientUrls) SetMediaRelease(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/release", id)
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteMediaRelease(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/release", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollections() (*URL, error) {
	path := "/api/v1/collections"
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollectionById(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollectionItems(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) CreateCollection() (*URL, error) {
	path := "/api/v1/collections"
	return c.getUrl(path)
}

func (c *ClientUrls) EditCollection(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteCollection(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) ChangeCollectionImages(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/images", id)
	return c.getUrl(path)
}

func (c *ClientUrls) AddCollectionItem(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) RemoveCollectionItem(id string, mediaId string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/items/%v", id, mediaId)
	return c.getUrl(path)
}

func (c *ClientUrls) EditCollectionItem(id string, mediaId string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/items/%v", id, mediaId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetProviders() (*URL, error) {
	path := "/api/v1/providers"
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderSearchMedia(providerName string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/media", providerName)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderSearchCollections(providerName string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/collections", providerName)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderImportMedia(providerName string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/media/import", providerName)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderImportCollections(providerName string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/collections/import", providerName)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderUpdateMedia(providerName string, mediaId string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/media/%v", providerName, mediaId)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderUpdateCollection(providerName string, collectionId string) (*URL, error) {
	path := Sprintf("/api/v1/providers/%v/collections/%v", providerName, collectionId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaImage(id string, file string) (*URL, error) {
	path := Sprintf("/files/media/%v/images/%v", id, file)
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollectionImage(id string, file string) (*URL, error) {
	path := Sprintf("/files/collections/%v/images/%v", id, file)
	return c.getUrl(path)
}
