// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api


func (c *Client) Signup(body SignupBody, options Options) (*Signup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signup](data, body)
}

func (c *Client) Signin(body SigninBody, options Options) (*Signin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signin](data, body)
}

func (c *Client) ChangePassword(body ChangePasswordBody, options Options) (*any, error) {
	path := "/api/v1/auth/password"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetMe(options Options) (*GetMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMe](data, nil)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetSystemInfo](data, nil)
}

func (c *Client) SyncLibrary(options Options) (*any, error) {
	path := "/api/v1/system/library"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) CleanupLibrary(options Options) (*any, error) {
	path := "/api/v1/system/library/cleanup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}


func (c *Client) UpdateUserSettings(body UpdateUserSettingsBody, options Options) (*any, error) {
	path := "/api/v1/user/settings"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) CreateApiToken(body CreateApiTokenBody, options Options) (*CreateApiToken, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateApiToken](data, body)
}

func (c *Client) GetAllApiTokens(options Options) (*GetAllApiTokens, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAllApiTokens](data, nil)
}

func (c *Client) DeleteApiToken(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetMedia(options Options) (*GetMedia, error) {
	path := "/api/v1/media"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, nil)
}

func (c *Client) GetMediaById(id string, options Options) (*GetMediaById, error) {
	path := Sprintf("/api/v1/media/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMediaById](data, nil)
}

func (c *Client) GetMediaParts(id string, options Options) (*GetMediaParts, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMediaParts](data, nil)
}

func (c *Client) SetMediaUserData(id string, body SetMediaUserData, options Options) (*any, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) GetCollections(options Options) (*GetCollections, error) {
	path := "/api/v1/collections"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollections](data, nil)
}

func (c *Client) GetCollectionById(id string, options Options) (*GetCollectionById, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollectionById](data, nil)
}

func (c *Client) GetCollectionItems(id string, options Options) (*GetCollectionItems, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetCollectionItems](data, nil)
}

func (c *Client) CreateCollection(body CreateCollectionBody, options Options) (*CreateCollection, error) {
	path := "/api/v1/collections"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateCollection](data, body)
}

func (c *Client) EditCollection(id string, body EditCollectionBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ProviderMyAnimeListGetAnime(id string, options Options) (*ProviderMyAnimeListAnime, error) {
	path := Sprintf("/api/v1/provider/myanimelist/anime/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[ProviderMyAnimeListAnime](data, nil)
}


func (c *ClientUrls) Signup() (*URL, error) {
	path := "/api/v1/auth/signup"
	return c.getUrl(path)
}

func (c *ClientUrls) Signin() (*URL, error) {
	path := "/api/v1/auth/signin"
	return c.getUrl(path)
}

func (c *ClientUrls) ChangePassword() (*URL, error) {
	path := "/api/v1/auth/password"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMe() (*URL, error) {
	path := "/api/v1/auth/me"
	return c.getUrl(path)
}

func (c *ClientUrls) GetSystemInfo() (*URL, error) {
	path := "/api/v1/system/info"
	return c.getUrl(path)
}

func (c *ClientUrls) SyncLibrary() (*URL, error) {
	path := "/api/v1/system/library"
	return c.getUrl(path)
}

func (c *ClientUrls) CleanupLibrary() (*URL, error) {
	path := "/api/v1/system/library/cleanup"
	return c.getUrl(path)
}

func (c *ClientUrls) SseHandler() (*URL, error) {
	path := "/api/v1/system/library/sse"
	return c.getUrl(path)
}

func (c *ClientUrls) UpdateUserSettings() (*URL, error) {
	path := "/api/v1/user/settings"
	return c.getUrl(path)
}

func (c *ClientUrls) CreateApiToken() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) GetAllApiTokens() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteApiToken(id string) (*URL, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMedia() (*URL, error) {
	path := "/api/v1/media"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaById(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaParts(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/parts", id)
	return c.getUrl(path)
}

func (c *ClientUrls) SetMediaUserData(id string) (*URL, error) {
	path := Sprintf("/api/v1/media/%v/user", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollections() (*URL, error) {
	path := "/api/v1/collections"
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollectionById(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetCollectionItems(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) CreateCollection() (*URL, error) {
	path := "/api/v1/collections"
	return c.getUrl(path)
}

func (c *ClientUrls) EditCollection(id string) (*URL, error) {
	path := Sprintf("/api/v1/collections/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) ProviderMyAnimeListGetAnime(id string) (*URL, error) {
	path := Sprintf("/api/v1/provider/myanimelist/anime/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaImage(id string, image string) (*URL, error) {
	path := Sprintf("/files/media/%v/%v", id, image)
	return c.getUrl(path)
}
